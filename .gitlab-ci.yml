include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml

.change_build_dir: &change_build_dir
  - rm -Rf build
  - mkdir build
  - cd build

.ubuntu_curr_builder: &ubuntu_curr_builder
  stage: build
  image: inivation/ubuntu_base:rolling
  # Variables is not getting merged, so we use before_script to set CCACHE vars.
  before_script:
    - export CCACHE_DIR="${CI_PROJECT_DIR}/.ccache"
    - export CCACHE_BASEDIR="${CI_PROJECT_DIR}"
    - export CCACHE_COMPILERCHECK="content"
  script:
    - *change_build_dir
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    - make -j1 -s
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .ccache
    policy: pull-push

sonarcloud_analysis:
  <<: *ubuntu_curr_builder
  image: inivation/ubuntu:rolling
  tags:
    - docker
    - ubuntu
    - build
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  script:
    - *change_build_dir
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    # Run the build inside the build wrapper
    - /build-wrapper/build-wrapper-linux-x86-64 --out-dir bw-output make -j4
    # Run the sonar-scanner CLI command
    - cd ..
    - /sonar-scanner/bin/sonar-scanner
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "master"
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .sonar/cache
      - .sonar/c-cache
      - .ccache
    policy: pull-push

build_macosx:
  stage: build
  tags:
    - macosx
    - build
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/.ccache"
    CCACHE_BASEDIR: "${CI_PROJECT_DIR}"
    CCACHE_COMPILERCHECK: "content"
  script:
    - *change_build_dir
    - cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    - make -j4
    - if [[ "$CI_COMMIT_BRANCH" != "master" ]] ; then exit 0; fi
    - rm -Rf /usr/local/lib/${CI_PROJECT_NAME}.so* /usr/local/include/${CI_PROJECT_NAME}/ /usr/local/include/${CI_PROJECT_NAME}cpp/ /usr/local/share/caer/
    - make install
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .ccache
    policy: pull-push

build_windows:
  stage: build
  tags:
    - windows
    - build
  variables:
    MSYSTEM: MINGW64
    CCACHE_COMPILERCHECK: "content"
  before_script:
    # Workaround for https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4524
    - export CCACHE_DIR="$(pwd)/.ccache"
    - export CCACHE_BASEDIR="$(pwd)"
  script:
    - source /usr/bin/init-paths
    - *change_build_dir
    - cmake -G "MSYS Makefiles" -DCMAKE_INSTALL_PREFIX=/mingw64 -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 -DEXAMPLES_INSTALL=1 ..
    - make -j8
    - if [[ "$CI_COMMIT_BRANCH" != "master" ]] ; then exit 0; fi
    - rm -Rf /mingw64/lib/${CI_PROJECT_NAME}.dll* /mingw64/include/${CI_PROJECT_NAME}/ /mingw64/include/${CI_PROJECT_NAME}cpp/ /mingw64/share/caer/
    - make install
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH
  cache:
    key: "${CI_JOB_NAME}-${CI_COMMIT_REF_SLUG}"
    paths:
      - .ccache
    policy: pull-push

build_ubuntu_1604:
  variables:
    CC: gcc-8
    CXX: g++-8
  <<: *ubuntu_curr_builder
  image: inivation/ubuntu:16.04
  script:
    - *change_build_dir
    # libserialport on Ubuntu 16.04 too old, disable serial devices support.
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=0 -DEXAMPLES_INSTALL=1 ..
    - make -j1 -s

build_ubuntu_1804:
  variables:
    CC: gcc-8
    CXX: g++-8
  <<: *ubuntu_curr_builder
  image: inivation/ubuntu:18.04

build_ubuntu_2004:
  variables:
    CC: gcc-10
    CXX: g++-10
  <<: *ubuntu_curr_builder
  image: inivation/ubuntu:20.04

build_ubuntu_curr_gcc8:
  variables:
    CC: gcc-8
    CXX: g++-8
  <<: *ubuntu_curr_builder

build_ubuntu_curr_gcc9:
  variables:
    CC: gcc-9
    CXX: g++-9
  <<: *ubuntu_curr_builder

build_ubuntu_curr_gcc10:
  variables:
    CC: gcc-10
    CXX: g++-10
  <<: *ubuntu_curr_builder

build_ubuntu_curr_clang8:
  variables:
    CC: clang-8
    CXX: clang++-8
  <<: *ubuntu_curr_builder

build_ubuntu_curr_clang9:
  variables:
    CC: clang-9
    CXX: clang++-9
  <<: *ubuntu_curr_builder

build_ubuntu_curr_clang10:
  variables:
    CC: clang-10
    CXX: clang++-10
  <<: *ubuntu_curr_builder

build_ubuntu_curr_clang11:
  variables:
    CC: clang-11
    CXX: clang++-11
  <<: *ubuntu_curr_builder

build_conan_gcc10:
  stage: build
  image: inivation/conan:latest
  tags:
    - docker
    - ubuntu
    - build
  variables:
    CCACHE_DIR: "${CI_PROJECT_DIR}/.ccache"
    CCACHE_BASEDIR: "${CI_PROJECT_DIR}"
    CCACHE_COMPILERCHECK: "content"
    CONAN_USER_HOME: "${CI_PROJECT_DIR}"
  before_script:
    - conan user
    - mkdir -p "${CI_PROJECT_DIR}/.conan/profiles/"
    - |
      cat > "${CI_PROJECT_DIR}/.conan/profiles/default" << EOF
      [settings]
      os=Linux
      os_build=Linux
      arch=x86_64
      arch_build=x86_64
      compiler=gcc
      compiler.version=10
      compiler.libcxx=libstdc++11
      build_type=Release
      [options]
      [build_requires]
      [env]
      EOF
  script:
    - *change_build_dir
    - conan install --build=missing ..
    - cmake -DUSE_CONAN_DEPS=1 -DENABLE_STATIC=1 -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=0 -DEXAMPLES_INSTALL=1 ..
    - make -j4 -s
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .ccache
      - .conan
    policy: pull-push

pages:
  image: inivation/ubuntu:rolling
  script:
    - *change_build_dir
    - cmake -DCMAKE_INSTALL_PREFIX=/usr -DENABLE_OPENCV=1 -DENABLE_SERIALDEV=1 ..
    - make doc
    - mv docs/html ../public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == "master"

release_ubuntu:
  stage: deploy
  image: inivation/ubuntu:rolling
  before_script:
    - gpg --pinentry-mode loopback --passphrase "${PPA_GPG_KEY_PASS}" --import "${PPA_GPG_KEY}"
    - echo -e "5\ny\n" | gpg --no-tty --command-fd 0 --edit-key "${PPA_GPG_KEY_ID}" trust quit
  script:
    - cd packaging/ubuntu-source-package/
    - ./packageUbuntu.sh --pkg-name ${CI_PROJECT_NAME} --pkg-version "${CI_COMMIT_TAG}" --distro xenial --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name ${CI_PROJECT_NAME} --pkg-version "${CI_COMMIT_TAG}" --distro bionic --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name ${CI_PROJECT_NAME} --pkg-version "${CI_COMMIT_TAG}" --distro focal --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
    - sleep 60 # rate-limit connections to PPA upload server
    - ./packageUbuntu.sh --pkg-name ${CI_PROJECT_NAME} --pkg-version "${CI_COMMIT_TAG}" --distro groovy --gpg-key-id "${PPA_GPG_KEY_ID}" --gpg-key-pass "${PPA_GPG_KEY_PASS}" --upload
  rules:
    - if: $CI_COMMIT_TAG

release_fedora:
  stage: deploy
  image: inivation/fedora:latest
  before_script:
    - mkdir -p ~/.config/
    - cp "${COPR_API_KEY}" ~/.config/copr
  script:
    - cd packaging/fedora-source-package/
    - ./packageFedora.sh --pkg-name ${CI_PROJECT_NAME} --pkg-version "${CI_COMMIT_TAG}"
    - copr-cli build --nowait inivation/inivation "${CI_PROJECT_NAME}-${CI_COMMIT_TAG}-0.fc31.src.rpm"
  rules:
    - if: $CI_COMMIT_TAG

release_gentoo_arch_brew:
  stage: deploy
  image: inivation/gentoo:latest
  before_script:
    - mkdir -p ~/.ssh/
    - cp "${GITCI_SSH_KEY}" ~/.ssh/id_ed25519
    - chmod 0600 ~/.ssh/id_ed25519
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - ssh-keyscan aur.archlinux.org >> ~/.ssh/known_hosts
    - cp "${GITCI_SSH_CONF}" ~/.gitconfig
  script:
    - cd packaging/linux/
    # Gentoo release
    - ./gentoo-release.sh --pkg-name ${CI_PROJECT_NAME} --pkg-version "${CI_COMMIT_TAG}" --pkg-category dev-libs
    # Arch release
    - ./arch-release.sh --pkg-name ${CI_PROJECT_NAME} --pkg-version "${CI_COMMIT_TAG}"
    # Brew release
    - ./brew-release.sh --pkg-name ${CI_PROJECT_NAME} --pkg-version "${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG
